/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;font-smoothing:antialiased;text-rendering:optimizeLegibility}body,html{min-height:100vh}body{font-family:Calibri,Helvetica,sans-serif;font-size:1em;line-height:1.2em;color:#747474;transition:all .4s ease-in .3s}.l-pink,.l-pink:hover{color:#e86783}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-weight:700;line-height:1.1}.h2,h2{font-size:305%}.h4,h4{font-size:200%}.n-text{font-size:156%;line-height:160%}.pink{color:#e86783}.heart-div{background:url(../img/heart-div.jpg) repeat-x}@media (min-width:320px){.h2,h2{font-size:267%}.h4,h4{font-size:175%}.n-text{font-size:98%;line-height:155%}.mov{margin-top:20px!important}.mov,.mov img{width:554px;max-width:100%}.femama{margin-top:20px!important}.femama,.femama img{width:377px;max-width:100%}}@media (min-width:360px){.n-text{font-size:118%;line-height:155%}}@media (min-width:768px){.n-text{font-size:151%;line-height:160%}}@media (min-width:1024px){.n-text{font-size:156%;line-height:160%}.footer .bg{background-size:125%!important}}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.header{width:1920px;background:url(../img/headerbg.jpg) repeat-x}.header,.header .header-banner{max-width:100%;height:auto}.header .header-banner img{max-width:100%;height:auto;visibility:hidden}@media (min-width:320px){.header-banner{width:630px;background:url(../img/minibanner.png) no-repeat;background-size:contain}}@media (min-width:630px){.header-banner{width:959px!important;background:url(../img/header-medium.jpg) no-repeat;background-size:contain}}@media (min-width:960px){.header-banner{width:1920px!important;background:url(../img/header-large.jpg) no-repeat;background-size:contain}}.main{height:auto;width:1172px;max-width:100%;margin:0 auto;padding-top:5.6%}.main .mov{width:554px;margin:0 auto}.main .femama{width:377px;margin:0 auto}.footer{height:100%;width:1920px;max-width:100%;background:#ffd1de url(../img/footerbg.jpg) 100% 0 repeat-x}.footer .bg{background:url(../img/footer-fita-large.png) no-repeat;background-position-x:63%;background-size:141%;height:100%}.footer .container{width:100%}.footer .container .obs{font-size:120%}.footer .container .quadro{background-color:#fff;width:400px;max-width:100%;height:498px;max-height:498px;margin:0 auto}.footer .container .quadro .novo{padding-top:3px;float:right;text-align:center;border:1px solid #444;color:#444;background-color:#fff;width:64px;height:29px;margin-top:13px;margin-right:-6px}.footer .container .quadro .novo:after{content:url(../img/quina.png);position:relative;z-index:1;top:-19px;right:-9px}.footer .container .quadro figure{padding-top:178px}.footer .container .quadro figure img{width:318px;max-width:100%;height:121px}.footer .container .quadro figcaption{text-transform:uppercase;font-family:Calibri;font-size:120%;text-align:center}.footer .container .quadro figcaption .item-title{color:#747468;line-height:1.4em}.footer .container .quadro figcaption .item-cor{line-height:1.4em}.footer .container .quadro figcaption .item-price{color:#b01209;line-height:1.4em}.footer .container .quadro figcaption .item-parcela{text-transform:none;line-height:1.6em}::selection{background:#333;color:#fff;text-shadow:none}::-moz-selection{background:#333;color:#fff;text-shadow:none}::-webkit-selection{background:#333;color:#fff;text-shadow:none}.mtp-15{margin-top:15px}.mtp-20{margin-top:20px}.mtp-25{margin-top:25px}.mtp-30{margin-top:30px}.mtp-35{margin-top:35px}.mtp-40{margin-top:40px}.mtp-50{margin-top:50px}.mtp-60{margin-top:60px}.fl-r{float:right}.mbt-50{margin-bottom:50px}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvX2NsZWFyZml4LnNjc3MiLCJzdHlsZS5jc3MiLCJtb2R1bGVzL19kZWZhdWx0cy5zY3NzIiwibW9kdWxlcy9fbm9ybWFsaXplLnNjc3MiLCJwYXJ0aWFscy9faGVhZGVyLnNjc3MiLCJwYXJ0aWFscy9fbWFpbi5zY3NzIiwicGFydGlhbHMvX2Zvb3Rlci5zY3NzIiwibW9kdWxlcy9fbWlzYy5zY3NzIiwibW9kdWxlcy9fcHJpbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJCQUNFLFlBQWEsQUFDYixhQUFlLENBQ2hCLEFBQ0QsUUNDRSxNREFTLENBRFgsQUFTQyxhQUZHLFVBQVksQ0FDYixBRVpILEVBQ0Usc0JBQXVCLEFBQ3ZCLDJCQUE0QixBQUM1QixpQ0FBbUMsQ0FDcEMsQUFDRCxVQUNDLGdCQUFrQixDQUVsQixBQUNELEtBQ0UseUNBQThDLEFBQzlDLGNBQWUsQUFDZixrQkFBbUIsQUFDbkIsY0FBZSxBQUNmLDhCQUFnQyxDQUNqQyxBQUNELHNCQUNDLGFBQWMsQ0FDZCxBQUNELDBDQUNFLGdCQUFrQixBQUNsQixlQUFpQixDQUNsQixBQUNELE9BQ0UsY0FBZ0IsQ0FDakIsQUFDRCxPQUNFLGNBQWUsQ0FDaEIsQUFDRCxRQUNFLGVBQWdCLEFBQ2hCLGdCQUFrQixDQUNuQixBQUVELE1BQ0UsYUFBYyxDQUNmLEFBRUQsV0FDRSw2Q0FBZ0QsQ0FDakQsQUFFRCx5QkFDRSxPQUNFLGNBQWdCLENBQ2pCLEFBQ0QsT0FDRSxjQUFnQixDQUNqQixBQUNELFFBQ0UsY0FBZSxBQUNmLGdCQUFrQixDQUNuQixBQUVELEtBR0UseUJBQTRCLENBSDlCLEFBUUMsY0FQQyxZQUFhLEFBQ2IsY0FBZ0IsQ0FLZixBQUdILFFBR0UseUJBQTRCLENBSDlCLEFBUUMsb0JBUEMsWUFBYSxBQUNiLGNBQWdCLENBS2YsQ0FBQSxBQUdMLHlCQUNFLFFBQ0UsZUFBZ0IsQUFDaEIsZ0JBQWtCLENBQ25CLENBQUEsQUFFSCx5QkFD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LFFBQ0UsZUFBaUIsQ0FDbEIsQUFDRCxRQUNFLGVBQWlCLENBQ2xCLEFBQ0QsUUFDRSxlQUFpQixDQUNsQixBQUNELFFBQ0UsZUFBaUIsQ0FDbEIsQUFDRCxNQUNFLFdBQWEsQ0FDZCxBQUVELFFBQ0Usa0JBQW1CLENBQ3BCLEFDN0NELGFBQ0UsRUFDRSxpQ0FBbUMsQUFDbkMscUJBQXVCLEFBQ3ZCLDBCQUE0QixBQUM1QiwwQkFBNkIsQ0FDOUIsQUFDRCxZQUVFLHlCQUEyQixDQUM1QixBQUNELGNBQ0UsMkJBQTRCLENBQzdCLEFBQ0Qsa0JBQ0UsNEJBQTZCLENBQzlCLEFBQ0QsNERBR0UsVUFBWSxDQUNiLEFBQ0QsZUFFRSxzQkFBdUIsQUFDdkIsdUJBQXlCLENBQzFCLEFBQ0QsTUFDRSwwQkFBNEIsQ0FDN0IsQUFDRCxPQUVFLHVCQUF5QixDQUMxQixBQUNELElBQ0Usd0JBQTJCLENBQzVCLEFBQ0QsTUFDRSxXQUFjLENBQUEsQUFFaEIsUUFHRSxVQUFXLEFBQ1gsUUFBVSxDQUNYLEFBQ0QsTUFFRSxzQkFBd0IsQ0FDekIsQ0FBQSIsImZpbGUiOiJzdHlsZS5taW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiJWNsZWFyIHtcclxuICBjb250ZW50OiAnICc7XHJcbiAgZGlzcGxheTogdGFibGU7XHJcbn1cclxuLmNsZWFyIHtcclxuICAqem9vbTogMTtcclxuICAmOmJlZm9yZSB7XHJcbiAgICBAZXh0ZW5kICVjbGVhcjtcclxuICB9XHJcbiAgJjphZnRlciB7XHJcbiAgICBAZXh0ZW5kICVjbGVhcjtcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gIH1cclxufVxyXG4iLCIuY2xlYXI6YmVmb3JlLCAuY2xlYXI6YWZ0ZXIge1xuICBjb250ZW50OiAnICc7XG4gIGRpc3BsYXk6IHRhYmxlOyB9XG5cbi5jbGVhciB7XG4gICp6b29tOiAxOyB9XG4gIC5jbGVhcjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7IH1cblxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTsgfVxuXG5ib2R5LCBodG1sIHtcbiAgbWluLWhlaWdodDogMTAwdmg7IH1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAnQ2FsaWJyaScsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjJlbTtcbiAgY29sb3I6ICM3NDc0NzQ7XG4gIHRyYW5zaXRpb246IGFsbCAuNHMgLjNzIGVhc2UtaW47IH1cblxuLmwtcGluaywgLmwtcGluazpob3ZlciB7XG4gIGNvbG9yOiAjRTg2NzgzOyB9XG5cbi5oMSwgLmgyLCAuaDMsIC5oNCwgLmg1LCAuaDYsIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgbGluZS1oZWlnaHQ6IDEuMTsgfVxuXG4uaDIsIGgyIHtcbiAgZm9udC1zaXplOiAzMDUlOyB9XG5cbi5oNCwgaDQge1xuICBmb250LXNpemU6IDIwMCU7IH1cblxuLm4tdGV4dCB7XG4gIGZvbnQtc2l6ZTogMTU2JTtcbiAgbGluZS1oZWlnaHQ6IDE2MCU7IH1cblxuLnBpbmsge1xuICBjb2xvcjogI0U4Njc4MzsgfVxuXG4uaGVhcnQtZGl2IHtcbiAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2hlYXJ0LWRpdi5qcGdcIikgcmVwZWF0LXg7IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDMyMHB4KSB7XG4gIC5oMiwgaDIge1xuICAgIGZvbnQtc2l6ZTogMjY3JTsgfVxuICAuaDQsIGg0IHtcbiAgICBmb250LXNpemU6IDE3NSU7IH1cbiAgLm4tdGV4dCB7XG4gICAgZm9udC1zaXplOiA5OCU7XG4gICAgbGluZS1oZWlnaHQ6IDE1NSU7IH1cbiAgLm1vdiB7XG4gICAgd2lkdGg6IDU1NHB4O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAyMHB4ICFpbXBvcnRhbnQ7IH1cbiAgICAubW92IGltZyB7XG4gICAgICB3aWR0aDogNTU0cHg7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7IH1cbiAgLmZlbWFtYSB7XG4gICAgd2lkdGg6IDM3N3B4O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAyMHB4ICFpbXBvcnRhbnQ7IH1cbiAgICAuZmVtYW1hIGltZyB7XG4gICAgICB3aWR0aDogMzc3cHg7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7IH0gfVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMzYwcHgpIHtcbiAgLm4tdGV4dCB7XG4gICAgZm9udC1zaXplOiAxMTglO1xuICAgIGxpbmUtaGVpZ2h0OiAxNTUlOyB9IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5uLXRleHQge1xuICAgIGZvbnQtc2l6ZTogMTUxJTtcbiAgICBsaW5lLWhlaWdodDogMTYwJTsgfSB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgLm4tdGV4dCB7XG4gICAgZm9udC1zaXplOiAxNTYlO1xuICAgIGxpbmUtaGVpZ2h0OiAxNjAlOyB9XG4gIC5mb290ZXIgLmJnIHtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEyNSUgIWltcG9ydGFudDsgfSB9XG5cbi8qISBub3JtYWxpemUuY3NzIHY0LjEuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cbi8qKlxyXG4gKiAxLiBDaGFuZ2UgdGhlIGRlZmF1bHQgZm9udCBmYW1pbHkgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gSUUgYW5kIGlPUy5cclxuICovXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovIH1cblxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxyXG4gKi9cbmJvZHkge1xuICBtYXJnaW46IDA7IH1cblxuLyogSFRNTDUgZGlzcGxheSBkZWZpbml0aW9uc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxyXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXHJcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxyXG4gKi9cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxubWFpbixcbm1lbnUsXG5uYXYsXG5zZWN0aW9uLFxuc3VtbWFyeSB7XG4gIC8qIDEgKi9cbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxyXG4gKi9cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gaU9TIDQtNy5cclxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXHJcbiAqL1xucHJvZ3Jlc3Mge1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXHJcbiAqL1xudGVtcGxhdGUsXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyogTGlua3NcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxyXG4gKiAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXHJcbiAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cclxuICovXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0cztcbiAgLyogMiAqLyB9XG5cbi8qKlxyXG4gKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcclxuICogaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqL1xuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZS13aWR0aDogMDsgfVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXHJcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBGaXJlZm94IDM5LS5cclxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cclxuICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIC8qIDEgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xuICAvKiAyICovIH1cblxuLyoqXHJcbiAqIFByZXZlbnQgdGhlIGR1cGxpY2F0ZSBhcHBsaWNhdGlvbiBvZiBgYm9sZGVyYCBieSB0aGUgbmV4dCBydWxlIGluIFNhZmFyaSA2LlxyXG4gKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogaW5oZXJpdDsgfVxuXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cclxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsgfVxuXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc3R5bGUgaW4gQW5kcm9pZCA0LjMtLlxyXG4gKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcclxuICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxyXG4gKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxyXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBiYWNrZ3JvdW5kIGFuZCBjb2xvciBpbiBJRSA5LS5cclxuICovXG5tYXJrIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDtcbiAgY29sb3I6ICMwMDA7IH1cblxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7IH1cblxuLyoqXHJcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxyXG4gKiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG5zdWIge1xuICBib3R0b206IC0wLjI1ZW07IH1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07IH1cblxuLyogRW1iZWRkZWQgY29udGVudFxyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXHJcbiAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxyXG4gKi9cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxuXG4vKipcclxuICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXHJcbiAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IG1hcmdpbiBpbiBJRSA4LlxyXG4gKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7IH1cblxuLyoqXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXHJcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxyXG4gKi9cbmhyIHtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDEgKi9cbiAgaGVpZ2h0OiAwO1xuICAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICAvKiAyICovIH1cblxuLyogRm9ybXNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxyXG4gKiAxLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cclxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxyXG4gKi9cbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250OiBpbmhlcml0O1xuICAvKiAxICovXG4gIG1hcmdpbjogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxyXG4gKiBSZXN0b3JlIHRoZSBmb250IHdlaWdodCB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cclxuICovXG5vcHRncm91cCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi8qKlxyXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cclxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cclxuICovXG5idXR0b24sXG5pbnB1dCB7XG4gIC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxyXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXHJcbiAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgLyogMSAqL1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxuXG4vKipcclxuICogMS4gUHJldmVudCBhIFdlYktpdCBidWcgd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gIGFuZCBgdmlkZW9gXHJcbiAqICAgIGNvbnRyb2xzIGluIEFuZHJvaWQgNC5cclxuICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cclxuICovXG5idXR0b24sXG5odG1sIFt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi8gfVxuXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cclxuICovXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDsgfVxuXG4vKipcclxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxyXG4gKi9cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0OyB9XG5cbi8qKlxyXG4gKiBDaGFuZ2UgdGhlIGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cclxuICovXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cclxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxyXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XHJcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cbmxlZ2VuZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgZGlzcGxheTogdGFibGU7XG4gIC8qIDEgKi9cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDMgKi9cbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgLyogMSAqLyB9XG5cbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxyXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLS5cclxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cclxuICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxyXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXHJcbiAqL1xuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bzsgfVxuXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXHJcbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxyXG4gKi9cblt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC8qIDEgKi9cbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XG4gIC8qIDIgKi8gfVxuXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxyXG4gKi9cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cblxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIHRleHQgc3R5bGUgb2YgcGxhY2Vob2xkZXJzIGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cclxuICovXG46Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgb3BhY2l0eTogMC41NDsgfVxuXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cclxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxyXG4gKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovIH1cblxuLmhlYWRlciB7XG4gIHdpZHRoOiAxOTIwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaGVhZGVyYmcuanBnXCIpIHJlcGVhdC14OyB9XG4gIC5oZWFkZXIgLmhlYWRlci1iYW5uZXIge1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87IH1cbiAgICAuaGVhZGVyIC5oZWFkZXItYmFubmVyIGltZyB7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDMyMHB4KSB7XG4gIC5oZWFkZXItYmFubmVyIHtcbiAgICB3aWR0aDogNjMwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL21pbmliYW5uZXIucG5nXCIpIG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47IH0gfVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNjMwcHgpIHtcbiAgLmhlYWRlci1iYW5uZXIge1xuICAgIHdpZHRoOiA5NTlweCAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9oZWFkZXItbWVkaXVtLmpwZ1wiKSBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluOyB9IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDk2MHB4KSB7XG4gIC5oZWFkZXItYmFubmVyIHtcbiAgICB3aWR0aDogMTkyMHB4ICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2hlYWRlci1sYXJnZS5qcGdcIikgbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsgfSB9XG5cbi5tYWluIHtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMTE3MnB4O1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nLXRvcDogNS42JTsgfVxuICAubWFpbiAubW92IHtcbiAgICB3aWR0aDogNTU0cHg7XG4gICAgbWFyZ2luOiAwIGF1dG87IH1cbiAgLm1haW4gLmZlbWFtYSB7XG4gICAgd2lkdGg6IDM3N3B4O1xuICAgIG1hcmdpbjogMCBhdXRvOyB9XG5cbi5mb290ZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxOTIwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2ZmZDFkZSB1cmwoLi4vaW1nL2Zvb3RlcmJnLmpwZykgcmlnaHQgdG9wIHJlcGVhdC14OyB9XG4gIC5mb290ZXIgLmJnIHtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoLi4vaW1nL2Zvb3Rlci1maXRhLWxhcmdlLnBuZykgbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtcG9zaXRpb24teDogNjMlO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTQxJTtcbiAgICBoZWlnaHQ6IDEwMCU7IH1cbiAgLmZvb3RlciAuY29udGFpbmVyIHtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAgIC5mb290ZXIgLmNvbnRhaW5lciAub2JzIHtcbiAgICAgIGZvbnQtc2l6ZTogMTIwJTsgfVxuICAgIC5mb290ZXIgLmNvbnRhaW5lciAucXVhZHJvIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICB3aWR0aDogNDAwcHg7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDQ5OHB4O1xuICAgICAgbWF4LWhlaWdodDogNDk4cHg7XG4gICAgICBtYXJnaW46IDAgYXV0bzsgfVxuICAgICAgLmZvb3RlciAuY29udGFpbmVyIC5xdWFkcm8gLm5vdm8ge1xuICAgICAgICBwYWRkaW5nLXRvcDogM3B4O1xuICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDtcbiAgICAgICAgY29sb3I6ICM0NDQ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgIHdpZHRoOiA2NHB4O1xuICAgICAgICBoZWlnaHQ6IDI5cHg7XG4gICAgICAgIG1hcmdpbi10b3A6IDEzcHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogLTZweDsgfVxuICAgICAgICAuZm9vdGVyIC5jb250YWluZXIgLnF1YWRybyAubm92bzphZnRlciB7XG4gICAgICAgICAgY29udGVudDogdXJsKC4uL2ltZy9xdWluYS5wbmcpO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICAgIHRvcDogLTE5cHg7XG4gICAgICAgICAgcmlnaHQ6IC05cHg7IH1cbiAgICAgIC5mb290ZXIgLmNvbnRhaW5lciAucXVhZHJvIGZpZ3VyZSB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAxNzhweDsgfVxuICAgICAgICAuZm9vdGVyIC5jb250YWluZXIgLnF1YWRybyBmaWd1cmUgaW1nIHtcbiAgICAgICAgICB3aWR0aDogMzE4cHg7XG4gICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTIxcHg7IH1cbiAgICAgIC5mb290ZXIgLmNvbnRhaW5lciAucXVhZHJvIGZpZ2NhcHRpb24ge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBmb250LWZhbWlseTogJ0NhbGlicmknO1xuICAgICAgICBmb250LXNpemU6IDEyMCU7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAgICAgICAuZm9vdGVyIC5jb250YWluZXIgLnF1YWRybyBmaWdjYXB0aW9uIC5pdGVtLXRpdGxlIHtcbiAgICAgICAgICBjb2xvcjogIzc0NzQ2ODtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS40ZW07IH1cbiAgICAgICAgLmZvb3RlciAuY29udGFpbmVyIC5xdWFkcm8gZmlnY2FwdGlvbiAuaXRlbS1jb3Ige1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjRlbTsgfVxuICAgICAgICAuZm9vdGVyIC5jb250YWluZXIgLnF1YWRybyBmaWdjYXB0aW9uIC5pdGVtLXByaWNlIHtcbiAgICAgICAgICBjb2xvcjogI0IwMTIwOTtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS40ZW07IH1cbiAgICAgICAgLmZvb3RlciAuY29udGFpbmVyIC5xdWFkcm8gZmlnY2FwdGlvbiAuaXRlbS1wYXJjZWxhIHtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS42ZW07IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnRm9udC1OYW1lJztcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9mb250LW5hbWUuZW90XCIpO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL2ZvbnQtbmFtZS5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9mb250LW5hbWUud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9mb250LW5hbWUudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250cy9mb250LW5hbWUuc3ZnI2ZvbnQtbmFtZVwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG46OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICMzMzM7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LXNoYWRvdzogbm9uZTsgfVxuXG46Oi1tb3otc2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogIzMzMztcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtc2hhZG93OiBub25lOyB9XG5cbjo6LXdlYmtpdC1zZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1zaGFkb3c6IG5vbmU7IH1cblxuLm10cC0xNSB7XG4gIG1hcmdpbi10b3A6IDE1cHg7IH1cblxuLm10cC0yMCB7XG4gIG1hcmdpbi10b3A6IDIwcHg7IH1cblxuLm10cC0yNSB7XG4gIG1hcmdpbi10b3A6IDI1cHg7IH1cblxuLm10cC0zMCB7XG4gIG1hcmdpbi10b3A6IDMwcHg7IH1cblxuLm10cC0zNSB7XG4gIG1hcmdpbi10b3A6IDM1cHg7IH1cblxuLm10cC00MCB7XG4gIG1hcmdpbi10b3A6IDQwcHg7IH1cblxuLm10cC01MCB7XG4gIG1hcmdpbi10b3A6IDUwcHg7IH1cblxuLm10cC02MCB7XG4gIG1hcmdpbi10b3A6IDYwcHg7IH1cblxuLmZsLXIge1xuICBmbG9hdDogcmlnaHQ7IH1cblxuLm1idC01MCB7XG4gIG1hcmdpbi1ib3R0b206IDUwcHg7IH1cblxuQG1lZGlhIHByaW50IHtcbiAgKiB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OyB9XG4gIGEsXG4gIGE6dmlzaXRlZCB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cbiAgYVtocmVmXTphZnRlciB7XG4gICAgY29udGVudDogXCIgKFwiIGF0dHIoaHJlZikgXCIpXCI7IH1cbiAgYWJiclt0aXRsZV06YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiIChcIiBhdHRyKHRpdGxlKSBcIilcIjsgfVxuICAuaXIgYTphZnRlcixcbiAgYVtocmVmXj1cImphdmFzY3JpcHQ6XCJdOmFmdGVyLFxuICBhW2hyZWZePVwiI1wiXTphZnRlciB7XG4gICAgY29udGVudDogXCJcIjsgfVxuICBwcmUsXG4gIGJsb2NrcXVvdGUge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkOyB9XG4gIHRoZWFkIHtcbiAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7IH1cbiAgdHIsXG4gIGltZyB7XG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkOyB9XG4gIGltZyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IH1cbiAgQHBhZ2Uge1xuICAgIG1hcmdpbjogMC41Y207IH1cbiAgcCxcbiAgaDIsXG4gIGgzIHtcbiAgICBvcnBoYW5zOiAzO1xuICAgIHdpZG93czogMzsgfVxuICBoMixcbiAgaDMge1xuICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGF2b2lkOyB9IH1cbiIsIioge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xyXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XHJcbn1cclxuYm9keSxodG1se1xyXG5cdG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG5cclxufVxyXG5ib2R5IHtcclxuICBmb250LWZhbWlseTogJ0NhbGlicmknLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxZW07XHJcbiAgbGluZS1oZWlnaHQ6IDEuMmVtO1xyXG4gIGNvbG9yOiAjNzQ3NDc0O1xyXG4gIHRyYW5zaXRpb246IGFsbCAuNHMgLjNzIGVhc2UtaW47XHJcbn1cclxuLmwtcGluaywubC1waW5rOmhvdmVye1xyXG4gY29sb3I6I0U4Njc4MztcclxufVxyXG4uaDEsIC5oMiwgLmgzLCAuaDQsIC5oNSwgLmg2LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBsaW5lLWhlaWdodDogMS4xO1xyXG59XHJcbi5oMixoMntcclxuICBmb250LXNpemU6IDMwNSU7XHJcbn1cclxuLmg0LGg0e1xyXG4gIGZvbnQtc2l6ZToyMDAlOyBcclxufVxyXG4ubi10ZXh0e1xyXG4gIGZvbnQtc2l6ZTogMTU2JTtcclxuICBsaW5lLWhlaWdodDogMTYwJTtcclxufVxyXG5cclxuLnBpbmt7XHJcbiAgY29sb3I6I0U4Njc4MztcclxufVxyXG5cclxuLmhlYXJ0LWRpdntcclxuICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaGVhcnQtZGl2LmpwZ1wiKSByZXBlYXQteDtcclxufVxyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6MzIwcHgpIHtcclxuICAuaDIsaDJ7XHJcbiAgICBmb250LXNpemU6IDI2NyU7XHJcbiAgfVxyXG4gIC5oNCxoNHtcclxuICAgIGZvbnQtc2l6ZTogMTc1JTsgXHJcbiAgfVxyXG4gIC5uLXRleHR7XHJcbiAgICBmb250LXNpemU6IDk4JTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxNTUlO1xyXG4gIH1cclxuXHJcbiAgLm1vdntcclxuICAgIHdpZHRoOiA1NTRweDtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi10b3A6IDIwcHggIWltcG9ydGFudDtcclxuICAgIGltZ3tcclxuICAgICAgd2lkdGg6IDU1NHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuZmVtYW1he1xyXG4gICAgd2lkdGg6IDM3N3B4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXRvcDogMjBweCAhaW1wb3J0YW50O1xyXG4gICAgaW1ne1xyXG4gICAgICB3aWR0aDogMzc3cHg7XHJcbiAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuQG1lZGlhIChtaW4td2lkdGg6MzYwcHgpIHtcclxuICAubi10ZXh0e1xyXG4gICAgZm9udC1zaXplOiAxMTglO1xyXG4gICAgbGluZS1oZWlnaHQ6IDE1NSU7XHJcbiAgfVxyXG59XHJcbkBtZWRpYSAobWluLXdpZHRoOjc2OHB4KSB7XHJcbiAgLm4tdGV4dHtcclxuICAgIGZvbnQtc2l6ZTogMTUxJTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxNjAlO1xyXG4gIH1cclxufVxyXG5AbWVkaWEgKG1pbi13aWR0aDoxMDI0cHgpIHtcclxuICAubi10ZXh0e1xyXG4gICAgZm9udC1zaXplOiAxNTYlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDE2MCU7XHJcbiAgfVxyXG5cclxuXHJcbiAgLmZvb3RlciAuYmcge1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMjUlICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG59XHJcbkBtZWRpYSAobWluLXdpZHRoOjExNDBweCkge1xyXG4gICBcclxufVxyXG5AbWVkaWEgKG1pbi13aWR0aDoxMjgwcHgpIHtcclxuICAgXHJcbn0iLCIvKiEgbm9ybWFsaXplLmNzcyB2NC4xLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXHJcblxyXG4vKipcclxuICogMS4gQ2hhbmdlIHRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5IGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxyXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIElFIGFuZCBpT1MuXHJcbiAqL1xyXG5cclxuaHRtbCB7XHJcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cclxuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xyXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqL1xyXG5cclxuYm9keSB7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG4vKiBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFLCBhbmQgRmlyZWZveC5cclxuICogMi4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXHJcbiAqL1xyXG5cclxuYXJ0aWNsZSxcclxuYXNpZGUsXHJcbmRldGFpbHMsIC8qIDEgKi9cclxuZmlnY2FwdGlvbixcclxuZmlndXJlLFxyXG5mb290ZXIsXHJcbmhlYWRlcixcclxubWFpbiwgLyogMiAqL1xyXG5tZW51LFxyXG5uYXYsXHJcbnNlY3Rpb24sXHJcbnN1bW1hcnkgeyAvKiAxICovXHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICovXHJcblxyXG5hdWRpbyxcclxuY2FudmFzLFxyXG5wcm9ncmVzcyxcclxudmlkZW8ge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGlPUyA0LTcuXHJcbiAqL1xyXG5cclxuYXVkaW86bm90KFtjb250cm9sc10pIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXHJcbiAqL1xyXG5cclxucHJvZ3Jlc3Mge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXHJcbiAqL1xyXG5cclxudGVtcGxhdGUsIC8qIDEgKi9cclxuW2hpZGRlbl0ge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8qIExpbmtzXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxyXG4gKiAyLiBSZW1vdmUgZ2FwcyBpbiBsaW5rcyB1bmRlcmxpbmUgaW4gaU9TIDgrIGFuZCBTYWZhcmkgOCsuXHJcbiAqL1xyXG5cclxuYSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8qIDEgKi9cclxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzOyAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcclxuICogaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqL1xyXG5cclxuYTphY3RpdmUsXHJcbmE6aG92ZXIge1xyXG4gIG91dGxpbmUtd2lkdGg6IDA7XHJcbn1cclxuXHJcbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIEZpcmVmb3ggMzktLlxyXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxyXG4gKi9cclxuXHJcbmFiYnJbdGl0bGVdIHtcclxuICBib3JkZXItYm90dG9tOiBub25lOyAvKiAxICovXHJcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cclxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFByZXZlbnQgdGhlIGR1cGxpY2F0ZSBhcHBsaWNhdGlvbiBvZiBgYm9sZGVyYCBieSB0aGUgbmV4dCBydWxlIGluIFNhZmFyaSA2LlxyXG4gKi9cclxuXHJcbmIsXHJcbnN0cm9uZyB7XHJcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxyXG4gKi9cclxuXHJcbmIsXHJcbnN0cm9uZyB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cclxuICovXHJcblxyXG5kZm4ge1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcclxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cclxuICovXHJcblxyXG5oMSB7XHJcbiAgZm9udC1zaXplOiAyZW07XHJcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBiYWNrZ3JvdW5kIGFuZCBjb2xvciBpbiBJRSA5LS5cclxuICovXHJcblxyXG5tYXJrIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xyXG4gIGNvbG9yOiAjMDAwO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuc21hbGwge1xyXG4gIGZvbnQtc2l6ZTogODAlO1xyXG59XHJcblxyXG4vKipcclxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXHJcbiAqIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5zdWIsXHJcbnN1cCB7XHJcbiAgZm9udC1zaXplOiA3NSU7XHJcbiAgbGluZS1oZWlnaHQ6IDA7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcclxufVxyXG5cclxuc3ViIHtcclxuICBib3R0b206IC0wLjI1ZW07XHJcbn1cclxuXHJcbnN1cCB7XHJcbiAgdG9wOiAtMC41ZW07XHJcbn1cclxuXHJcbi8qIEVtYmVkZGVkIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cclxuICovXHJcblxyXG5pbWcge1xyXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxyXG4gKi9cclxuXHJcbnN2Zzpub3QoOnJvb3QpIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4vKiBHcm91cGluZyBjb250ZW50XHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cclxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmNvZGUsXHJcbmtiZCxcclxucHJlLFxyXG5zYW1wIHtcclxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cclxuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IG1hcmdpbiBpbiBJRSA4LlxyXG4gKi9cclxuXHJcbmZpZ3VyZSB7XHJcbiAgbWFyZ2luOiAxZW0gNDBweDtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXHJcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxyXG4gKi9cclxuXHJcbmhyIHtcclxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xyXG4gIGhlaWdodDogMDsgLyogMSAqL1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXHJcbn1cclxuXHJcbi8qIEZvcm1zXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqIDIuIFJlbW92ZSB0aGUgbWFyZ2luIGluIEZpcmVmb3ggYW5kIFNhZmFyaS5cclxuICovXHJcblxyXG5idXR0b24sXHJcbmlucHV0LFxyXG5zZWxlY3QsXHJcbnRleHRhcmVhIHtcclxuICBmb250OiBpbmhlcml0OyAvKiAxICovXHJcbiAgbWFyZ2luOiAwOyAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN0b3JlIHRoZSBmb250IHdlaWdodCB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cclxuICovXHJcblxyXG5vcHRncm91cCB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cclxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cclxuICovXHJcblxyXG5idXR0b24sXHJcbmlucHV0IHsgLyogMSAqL1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXHJcbiAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cclxuICovXHJcblxyXG5idXR0b24sXHJcbnNlbGVjdCB7IC8qIDEgKi9cclxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxyXG4gKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXHJcbiAqIDIuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXHJcbiAqL1xyXG5cclxuYnV0dG9uLFxyXG5odG1sIFt0eXBlPVwiYnV0dG9uXCJdLCAvKiAxICovXHJcblt0eXBlPVwicmVzZXRcIl0sXHJcblt0eXBlPVwic3VibWl0XCJdIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cclxuICovXHJcblxyXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXHJcblt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLFxyXG5bdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxyXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XHJcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xyXG4gIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXHJcbiAqL1xyXG5cclxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxyXG5bdHlwZT1cImJ1dHRvblwiXTotbW96LWZvY3VzcmluZyxcclxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcclxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xyXG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoYW5nZSB0aGUgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxyXG4gKi9cclxuXHJcbmZpZWxkc2V0IHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xyXG4gIG1hcmdpbjogMCAycHg7XHJcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cclxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxyXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XHJcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmxlZ2VuZCB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xyXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXHJcbiAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cclxuICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cclxuICBwYWRkaW5nOiAwOyAvKiAzICovXHJcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRS5cclxuICovXHJcblxyXG50ZXh0YXJlYSB7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC0uXHJcbiAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXHJcbiAqL1xyXG5cclxuW3R5cGU9XCJjaGVja2JveFwiXSxcclxuW3R5cGU9XCJyYWRpb1wiXSB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xyXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cclxuICovXHJcblxyXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcclxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xyXG4gIGhlaWdodDogYXV0bztcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxyXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cclxuICovXHJcblxyXG5bdHlwZT1cInNlYXJjaFwiXSB7XHJcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cclxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxyXG4gKi9cclxuXHJcblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxyXG5bdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XHJcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG59XHJcblxyXG4vKipcclxuICogQ29ycmVjdCB0aGUgdGV4dCBzdHlsZSBvZiBwbGFjZWhvbGRlcnMgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxyXG4gKi9cclxuXHJcbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XHJcbiAgY29sb3I6IGluaGVyaXQ7XHJcbiAgb3BhY2l0eTogMC41NDtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXHJcbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cclxuICovXHJcblxyXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xyXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cclxufVxyXG4iLCIuaGVhZGVyIHtcclxuICAgIHdpZHRoOjE5MjBweDtcclxuICAgIG1heC13aWR0aDoxMDAlO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2hlYWRlcmJnLmpwZ1wiKSByZXBlYXQteDtcclxuICAgIFxyXG4gICAgLmhlYWRlci1iYW5uZXJ7XHJcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG5cclxuICAgICAgICBpbWd7XHJcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkBtZWRpYSAobWluLXdpZHRoOjMyMHB4KSB7XHJcbiAgICAuaGVhZGVyLWJhbm5lcntcclxuICAgICAgICB3aWR0aDogNjMwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL21pbmliYW5uZXIucG5nXCIpIG5vLXJlcGVhdDtcclxuICAgICAgICAvL3BhZGRpbmctdG9wOiAzNi4zNCU7XHJcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4gICAgfVxyXG59XHJcbkBtZWRpYSAobWluLXdpZHRoOjYzMHB4KSB7XHJcbiAgICAuaGVhZGVyLWJhbm5lcntcclxuICAgICAgICB3aWR0aDogOTU5cHggIWltcG9ydGFudDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaGVhZGVyLW1lZGl1bS5qcGdcIikgbm8tcmVwZWF0O1xyXG4gICAgICAgIC8vcGFkZGluZy10b3A6IDUyLjAzJSAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICAgIH1cclxufVxyXG5AbWVkaWEgKG1pbi13aWR0aDo5NjBweCkge1xyXG4gICAgLmhlYWRlci1iYW5uZXJ7XHJcbiAgICAgICAgd2lkdGg6IDE5MjBweCAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9oZWFkZXItbGFyZ2UuanBnXCIpIG5vLXJlcGVhdDtcclxuICAgICAgICAvL3BhZGRpbmctdG9wOiA1Mi4wOCUgIWltcG9ydGFudDtcclxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICB9XHJcbn1cclxuIiwiLm1haW4ge1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgd2lkdGg6MTE3MnB4O1xyXG4gICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICBtYXJnaW46MCBhdXRvO1xyXG4gICAgcGFkZGluZy10b3A6IDUuNiU7ICAgXHJcblxyXG4gICAgLm1vdntcclxuICAgICAgIHdpZHRoOiA1NTRweDtcclxuICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgLmZlbWFtYXtcclxuICAgICAgIHdpZHRoOiAzNzdweDsgXHJcbiAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxufVxyXG5cclxuIiwiLmZvb3RlciB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTkyMHB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogI2ZmZDFkZSB1cmwoLi4vaW1nL2Zvb3RlcmJnLmpwZykgcmlnaHQgdG9wIHJlcGVhdC14O1xyXG4gICAgXHJcbiAgICAuYmd7XHJcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKC4uL2ltZy9mb290ZXItZml0YS1sYXJnZS5wbmcpIG5vLXJlcGVhdDtcclxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uLXg6IDYzJTtcclxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDE0MSU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLmNvbnRhaW5lcntcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBcclxuICAgICAgICAub2Jze1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEyMCU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5xdWFkcm97XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I2ZmZjtcclxuICAgICAgICAgICAgd2lkdGg6NDAwcHg7XHJcbiAgICAgICAgICAgIG1heC13aWR0aDoxMDAlO1xyXG5cclxuICAgICAgICAgICAgaGVpZ2h0OjQ5OHB4O1xyXG4gICAgICAgICAgICBtYXgtaGVpZ2h0OjQ5OHB4O1xyXG4gICAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgICAgLm5vdm97XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogM3B4O1xyXG4gICAgICAgICAgICAgICAgZmxvYXQ6cmlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBib3JkZXI6MXB4IHNvbGlkICM0NDQ7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogIzQ0NDtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I2ZmZjtcclxuICAgICAgICAgICAgICAgIHdpZHRoOjY0cHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MjlweDtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6MTNweDtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogLTZweDtcclxuXHJcbiAgICAgICAgICAgICAgICAmOmFmdGVye1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVybCguLi9pbWcvcXVpbmEucG5nKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IC0xOXB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtOXB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpZ3VyZXtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxNzhweDtcclxuICAgICAgICAgICAgICAgIGltZ3tcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzE4cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTIxcHg7XHJcbiAgICAgICAgICAgICAgICB9ICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpZ2NhcHRpb257XHJcbiAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdDYWxpYnJpJztcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTIwJTtcclxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLml0ZW0tdGl0bGV7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6Izc0NzQ2ODtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS40ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAuaXRlbS1jb3J7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLml0ZW0tcHJpY2V7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6I0IwMTIwOTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS40ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAuaXRlbS1wYXJjZWxhe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjZlbTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4gICAgXHJcbiIsIjo6c2VsZWN0aW9ue1xyXG4gIGJhY2tncm91bmQ6ICMzMzM7XHJcbiAgY29sb3I6ICNmZmY7XHJcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XHJcbn1cclxuOjotbW96LXNlbGVjdGlvbntcclxuICBiYWNrZ3JvdW5kOiAjMzMzO1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIHRleHQtc2hhZG93OiBub25lO1xyXG59XHJcbjo6LXdlYmtpdC1zZWxlY3Rpb257XHJcbiAgYmFja2dyb3VuZDogIzMzMztcclxuICBjb2xvcjogI2ZmZjtcclxuICB0ZXh0LXNoYWRvdzogbm9uZTtcclxufVxyXG4ubXRwLTE1e1xyXG4gIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxuLm10cC0yMHtcclxuICBtYXJnaW4tdG9wOiAyMHB4O1xyXG59XHJcbi5tdHAtMjV7XHJcbiAgbWFyZ2luLXRvcDogMjVweDtcclxufVxyXG4ubXRwLTMwe1xyXG4gIG1hcmdpbi10b3A6IDMwcHg7XHJcbn1cclxuLm10cC0zNXtcclxuICBtYXJnaW4tdG9wOiAzNXB4O1xyXG59XHJcbi5tdHAtNDB7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxufVxyXG4ubXRwLTUwe1xyXG4gIG1hcmdpbi10b3A6IDUwcHg7XHJcbn1cclxuLm10cC02MHtcclxuICBtYXJnaW4tdG9wOiA2MHB4O1xyXG59XHJcbi5mbC1ye1xyXG4gIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxuLm1idC01MHtcclxuICBtYXJnaW4tYm90dG9tOjUwcHg7XHJcbn0iLCJAbWVkaWEgcHJpbnQge1xyXG4gICoge1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcclxuICAgIGNvbG9yOiAjMDAwICFpbXBvcnRhbnQ7XHJcbiAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG4gIH1cclxuICBhLFxyXG4gIGE6dmlzaXRlZCB7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuICB9XHJcbiAgYVtocmVmXTphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIiAoXCIgYXR0cihocmVmKSBcIilcIjtcclxuICB9XHJcbiAgYWJiclt0aXRsZV06YWZ0ZXIge1xyXG4gICAgY29udGVudDogXCIgKFwiIGF0dHIodGl0bGUpIFwiKVwiO1xyXG4gIH1cclxuICAuaXIgYTphZnRlcixcclxuICAgYVtocmVmXj1cImphdmFzY3JpcHQ6XCJdOmFmdGVyLFxyXG4gICBhW2hyZWZePVwiI1wiXTphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gIH1cclxuICBwcmUsXHJcbiAgYmxvY2txdW90ZSB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xyXG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkO1xyXG4gIH1cclxuICB0aGVhZCB7XHJcbiAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7XHJcbiAgfVxyXG4gIHRyLFxyXG4gIGltZyB7XHJcbiAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7XHJcbiAgfVxyXG4gIGltZyB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICB9XHJcbiAgQHBhZ2Uge1xyXG4gICAgbWFyZ2luOiAwLjVjbTtcclxuICB9XHJcbiAgcCxcclxuICBoMixcclxuICBoMyB7XHJcbiAgICBvcnBoYW5zOiAzO1xyXG4gICAgd2lkb3dzOiAzO1xyXG4gIH1cclxuICBoMixcclxuICBoMyB7XHJcbiAgICBwYWdlLWJyZWFrLWFmdGVyOiBhdm9pZDtcclxuICB9XHJcbn1cclxuIl19 */
